
---
- name: "Install Prometheus.."
  hosts:
    - localhost
  become: true
  vars:
    # https://github.com/prometheus/prometheus/releases/download/v2.32.1/
    url: "https://github.com/prometheus/prometheus/releases/download"
    #version: "2.43.0"
    version: "3.3.1"
    application: "prometheus"
    application_service: "{{ application }}.service"
    architecture: "linux-amd64"

    hostname: "localhost"
    port: "9090"
    description: "Prometheus"
    user: "prometheus"
    group: "prometheus"
    exec: "/usr/local/bin/prometheus"

  tasks:
    - name: "Create {{user}} user.."
      user:
        name: "{{user}}"
        create_home: false
        shell: /usr/bin/false

    - name: "Download {{application}} binaries.."
      get_url:
        url: "{{url}}/v{{version}}/{{application}}-{{version}}.{{architecture}}.tar.gz"
        dest: "/tmp/{{application}}-{{version}}.{{architecture}}.tar.gz"

    - name: "Extract {{application}} archive.."
      ansible.builtin.unarchive:
        src: "/tmp/{{application}}-{{version}}.{{architecture}}.tar.gz"
        dest: "/tmp"

    - name: "Copy {{application}} binary to standard binary folder.."
      ansible.builtin.copy:
        src: /tmp/{{application}}-{{version}}.{{architecture}}/{{application}}
        dest: /usr/local/bin/{{application}}
        owner: "{{user}}"
        group: "{{user}}"
        mode: "0755"

    - name: "Create storage folder for the {{application}} in /var/lib/{{application}}.."
      file:
        name: "/var/lib/{{application}}"
        state: directory
        owner: "{{user}}"
        group: "{{group}}"

    - name: "Create configuration folder for the {{application}} in /etc/{{application}}.."
      file:
        name: "/etc/{{application}}"
        state: directory

    - name: "Create the configuration file for {{application}}.."
      template:
        src: "{{ (playbook_dir + '/../root/etc/prometheus/prometheus.yml.j2') | realpath }}"
        dest: "/etc/prometheus/prometheus.yml"

    - name: "Add firewall exception for {{application}} port: {{port}}/tcp.."
      firewalld:
        port: "{{port}}/tcp"
        immediate: yes
        permanent: true
        state: enabled

    - name: "Create systemd service file for {{application}}.."
      template:
        src: "{{ (playbook_dir + '/../root/etc/systemd/system/' + application + '.service.j2') | realpath }}"
        dest: /etc/systemd/system/{{application}}.service

    - name: Reload systemd..
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: "Stop {{ application }} if running.."
      service:
        name: "{{ application }}"
        state: stopped
      ignore_errors: yes

    - name: "Start and enable service for {{application}}.."
      service:
        name: "{{application}}"
        enabled: yes
        state: started

    - name: "Check if {{ application_service }} is running"
      shell: "systemctl is-active {{ application_service }}"
      register: application_service_status
      changed_when: false
      failed_when: false

    - name: "Debug service status"
      debug:
        msg: "Service {{ application_service }} is in state: {{ application_service_status.stdout }}"

    - name: "Fail if {{ application_service }} is not running"
      fail:
        msg: "Service {{ application_service }} is not running!"
      when: application_service_status.stdout != "active"
